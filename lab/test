#!/bin/bash
set -e

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")
. "$HERE/_env"
. "$HERE/_trap"

WORKSPACE=/tmp/kubernetes-registry-spooler
mkdir --parents "$WORKSPACE"

m 'cleaning up'

kubectl create namespace "$NAMESPACE" || true
kubectl delete --filename="$ROOT/assets/registry-with-spooler-sidecar.yaml" --namespace="$NAMESPACE" || true
kubectl delete secrets registry-auth --namespace="$NAMESPACE" || true
kubectl delete events --all --namespace="$NAMESPACE"

if [ "$1" == '-b' ]; then
	m 'building "kubernetes-registry-spool" image'
	"$HERE/build-container-image"
	"$HERE/publish-container-image"
fi

m 'deploying authentication secret'

rm --recursive --force "$WORKSPACE/registry-htpasswd"
# Note: Docker registry requires bcrypt
# https://docs.docker.com/registry/configuration/#htpasswd
htpasswd -cbB "$WORKSPACE/registry-htpasswd" username password
kubectl create secret generic registry-auth --from-file="$WORKSPACE/registry-htpasswd" --namespace="$NAMESPACE"

m 'deploying registry with spooler sidecar'

kubectl apply --filename="$ROOT/assets/registry-with-spooler-sidecar.yaml" --namespace="$NAMESPACE"

DEPLOYMENT=$(kubectl get deployments --selector=app.kubernetes.io/name=registry --namespace="$NAMESPACE" --output=jsonpath={.items[0].metadata.name})
kubectl wait "deployments/$DEPLOYMENT" --namespace="$NAMESPACE" \
	--for=condition=Available

POD=$(kubectl get pods --field-selector=status.phase=Running --selector=app.kubernetes.io/name=registry --namespace="$NAMESPACE" --output=jsonpath={.items[0].metadata.name})
kubectl wait "pods/$POD" --namespace="$NAMESPACE" \
	--for=condition=ContainersReady

echo POD=$POD

m 'pushing text file to "catalog/hello"'

echo 'hello world' > "$WORKSPACE/hello.txt"
kubectl cp "$WORKSPACE/hello.txt" $POD:/spool/catalog\\hello.txt~ --container=spooler --namespace="$NAMESPACE"
kubectl exec $POD --container=spooler --namespace="$NAMESPACE" -- \
mv /spool/catalog\\hello.txt~ /spool/catalog\\hello.txt

sleep 1

m 'pulling text file from "catalog/hello"'

kubectl exec $POD --container=spooler --namespace="$NAMESPACE" -- \
registry-client pull catalog/hello --certificate=/tls/tls.crt --username=username --password=password > "$WORKSPACE/hello.tar"

rm --recursive --force "$WORKSPACE/hello"
mkdir --parents "$WORKSPACE/hello"
tar --extract --file="$WORKSPACE/hello.tar" --directory="$WORKSPACE/hello"
cat "$WORKSPACE/hello/"*.gz | gunzip

m 'creating container image tarball'

podman rmi localhost:5000/catalog/myimage || true
podman rmi docker.io/library/hello-world || true
podman pull docker.io/library/hello-world
podman tag docker.io/library/hello-world localhost:5000/catalog/myimage
rm --force "$WORKSPACE/myimage.tar"
podman save localhost:5000/catalog/myimage --output "$WORKSPACE/myimage.tar"

m 'pushing container image tarball to "catalog/myimage"'

kubectl cp "$WORKSPACE/myimage.tar" $POD:/spool/catalog\\myimage.tar~ --container=spooler --namespace="$NAMESPACE"
kubectl exec $POD --container=spooler --namespace="$NAMESPACE" -- \
mv /spool/catalog\\myimage.tar~ /spool/catalog\\myimage.tar

sleep 3

m 'pulling container image tarball from "catalog/myimage"'

kubectl exec $POD --container=spooler --namespace="$NAMESPACE" -- \
registry-client pull catalog/myimage --certificate=/tls/tls.crt --username=username --password=password > "$WORKSPACE/myimage-pulled.tar"

m 'listing images'

kubectl exec $POD --container=spooler --namespace="$NAMESPACE" -- \
registry-client list --certificate=/tls/tls.crt --username=username --password=password
